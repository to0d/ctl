TranslationUnitDecl 0x606348 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x606b70 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x606910 '__int128'
|-TypedefDecl 0x606be0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x606930 'unsigned __int128'
|-TypedefDecl 0x606ee8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'
| `-RecordType 0x606cc0 'struct __NSConstantString_tag'
|   `-Record 0x606c38 '__NSConstantString_tag'
|-TypedefDecl 0x606f80 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x606f40 'char *'
|   `-BuiltinType 0x6063f0 'char'
|-TypedefDecl 0x607278 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag[1]'
| `-ConstantArrayType 0x607220 'struct __va_list_tag[1]' 1 
|   `-RecordType 0x607060 'struct __va_list_tag'
|     `-Record 0x606fd8 '__va_list_tag'
`-FunctionDecl 0x66ce10 <hello.c:3:1, line:11:1> line:3:5 main 'int ()'
  `-CompoundStmt 0x66d480 <col:12, line:11:1>
    |-DeclStmt 0x66d140 <line:4:5, col:21>
    | |-VarDecl 0x66cf10 <col:5, col:9> col:9 used i 'int'
    | |-VarDecl 0x66cf90 <col:5, col:11> col:11 used j 'int'
    | |-VarDecl 0x66d010 <col:5, col:13> col:13 k 'int'
    | `-VarDecl 0x66d090 <col:5, col:20> col:17 used t 'int' cinit
    |   `-IntegerLiteral 0x66d0f8 <col:20> 'int' 0
    |-ForStmt 0x66d400 <line:5:5, line:9:5>
    | |-BinaryOperator 0x66d198 <line:5:9, col:11> 'int' '='
    | | |-DeclRefExpr 0x66d158 <col:9> 'int' lvalue Var 0x66cf10 'i' 'int'
    | | `-IntegerLiteral 0x66d178 <col:11> 'int' 0
    | |-<<<NULL>>>
    | |-BinaryOperator 0x66d210 <col:13, col:15> 'int' '<'
    | | |-ImplicitCastExpr 0x66d1f8 <col:13> 'int' <LValueToRValue>
    | | | `-DeclRefExpr 0x66d1b8 <col:13> 'int' lvalue Var 0x66cf10 'i' 'int'
    | | `-IntegerLiteral 0x66d1d8 <col:15> 'int' 2
    | |-UnaryOperator 0x66d250 <col:17, col:18> 'int' postfix '++'
    | | `-DeclRefExpr 0x66d230 <col:17> 'int' lvalue Var 0x66cf10 'i' 'int'
    | `-CompoundStmt 0x66d3e8 <line:6:5, line:9:5>
    |   `-ForStmt 0x66d3b0 <line:7:9, line:8:14>
    |     |-BinaryOperator 0x66d2a8 <line:7:13, col:15> 'int' '='
    |     | |-DeclRefExpr 0x66d268 <col:13> 'int' lvalue Var 0x66cf90 'j' 'int'
    |     | `-IntegerLiteral 0x66d288 <col:15> 'int' 0
    |     |-<<<NULL>>>
    |     |-BinaryOperator 0x66d320 <col:17, col:19> 'int' '<'
    |     | |-ImplicitCastExpr 0x66d308 <col:17> 'int' <LValueToRValue>
    |     | | `-DeclRefExpr 0x66d2c8 <col:17> 'int' lvalue Var 0x66cf90 'j' 'int'
    |     | `-IntegerLiteral 0x66d2e8 <col:19> 'int' 3
    |     |-UnaryOperator 0x66d360 <col:21, col:22> 'int' postfix '++'
    |     | `-DeclRefExpr 0x66d340 <col:21> 'int' lvalue Var 0x66cf90 'j' 'int'
    |     `-UnaryOperator 0x66d398 <line:8:13, col:14> 'int' postfix '++'
    |       `-DeclRefExpr 0x66d378 <col:13> 'int' lvalue Var 0x66d090 't' 'int'
    `-ReturnStmt 0x66d470 <line:10:5, col:12>
      `-ImplicitCastExpr 0x66d458 <col:12> 'int' <LValueToRValue>
        `-DeclRefExpr 0x66d438 <col:12> 'int' lvalue Var 0x66d090 't' 'int'

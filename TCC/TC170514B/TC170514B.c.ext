+++
date = "2023-10-01"
outline = "en_x"
outline_level = 3
!top = ""
mark = "ptrace: set breakpoint"
tags = [
    "ptrace"
]
template = blog_md.template
domain = "Linux"
+++

### Main steps


1. Find breakpoint address


            int main()
            {
                int j = 0;
                for(int i = 0; i< 3; ++i){
                    sleep(1);
                    j *= 2;                           <====== add breakpoint
                    printf("Hello, i=%d!\n", i);
                }
                printf("Hello, j=%d!\n", j);
                return 0;
            }



    1. objdump -d hello.a
    
            0000000000401b90 <_start>:
              401b90:	f3 0f 1e fa          	endbr64 
              401b94:	31 ed                	xor    %ebp,%ebp

            0000000000401cb5 <main>:
              401cb5:	f3 0f 1e fa          	endbr64 
              401cb9:	55                   	push   %rbp
              401cba:	48 89 e5             	mov    %rsp,%rbp
              401cbd:	48 83 ec 10          	sub    $0x10,%rsp
              401cc1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
              401cc8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
              401ccf:	eb 2c                	jmp    401cfd <main+0x48>
              401cd1:	bf 01 00 00 00       	mov    $0x1,%edi
              401cd6:	b8 00 00 00 00       	mov    $0x0,%eax
              401cdb:	e8 20 e2 04 00       	callq  44ff00 <__sleep>
              401ce0:	d1 65 f8             	shll   -0x8(%rbp)               // 左移指令 ====> j*= 2
              401ce3:	8b 45 fc             	mov    -0x4(%rbp),%eax
              401ce6:	89 c6                	mov    %eax,%esi
              401ce8:	48 8d 3d 15 33 09 00 	lea    0x93315(%rip),%rdi     
              401cef:	b8 00 00 00 00       	mov    $0x0,%eax
              401cf4:	e8 87 ec 00 00       	callq  410980 <_IO_printf>
              401cf9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
              401cfd:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
              401d01:	7e ce                	jle    401cd1 <main+0x1c>
              401d03:	8b 45 f8             	mov    -0x8(%rbp),%eax
              401d06:	89 c6                	mov    %eax,%esi
              401d08:	48 8d 3d 03 33 09 00 	lea    0x93303(%rip),%rdi  
              401d0f:	b8 00 00 00 00       	mov    $0x0,%eax
              401d14:	e8 67 ec 00 00       	callq  410980 <_IO_printf>
              401d19:	b8 00 00 00 00       	mov    $0x0,%eax
              401d1e:	c9                   	leaveq 
              401d1f:	c3                   	retq   
  


        - need to add a breakpoint at addr **401ce0**



    - readelf -h hello.a

            ELF Header:
              Magic:   7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00
              Class:                             ELF64
              Data:                              2's complement, little endian
              Version:                           1 (current)
              OS/ABI:                            UNIX - GNU
              ABI Version:                       0
              Type:                              EXEC (Executable file)
              Machine:                           Advanced Micro Devices X86-64
              Version:                           0x1
              Entry point address:               0x401b90
              Start of program headers:          64 (bytes into file)
              Start of section headers:          872296 (bytes into file)
              Flags:                             0x0
              Size of this header:               64 (bytes)
              Size of program headers:           56 (bytes)
              Number of program headers:         10
              Size of section headers:           64 (bytes)
              Number of section headers:         37
              Section header string table index: 36
              
        - Entry point address:               0x401b90



                +---------+ 
                | Entry   | 0x401b90: readelf -h:(Entry point address) / objdump -d: (_start)
                |         | 
                |         | 
                | for(){  | 
                |         | 
                | }       | 0401ce0: add breakpoint
                +---------+ 





- Update source


            /* Create breakpoint and run to it*/
            debug_breakpoint* bp = create_breakpoint(child_pid, (void*)(0x401ce0)); 
                                                                 -----------------
                                                                       Breakpoint

### Note

1. 由于动态链接导致加载地址是动态的，这种加断点方法只有在静态链接时有效, see makefile: gcc xx **-static** @TAG(静态链接)
    - 动态重定位时候，调试器如何得到具体断点地址? - 2023/10/01 @TAG(动态链接, 重定位) @TODO

2. 第二次断点位置不正确 why? - 2023/10/01 @TODO

        [513] debugger started
        [514] target started. will run 'hello.a'
        [513] child now at EIP = 0x00401B90
        [513] create_breakpoint at 0x00401CE0
        [513] enable_breakpoint instruction= 0x00401CE0, old=0x8BF865D1, new=0x8BF865CC
        [513] breakpoint created
        [513] child stopped at breakpoint. EIP = 0x00401CE1
        [513] resume_from_breakpoint at EIP = 0x00401CE1
        [513] disable_breakpoint instruction= 0x00401CE0, old=0x8BF865CC, new=0x8BF865D1
        [513]   resume at EIP = 0x00401CE3
        [513] enable_breakpoint instruction= 0x00401CE0, old=0x8BF865D1, new=0x8BF865CC
        [513] child stopped at breakpoint. EIP = 0x00401CE3
        [513] resume_from_breakpoint at EIP = 0x00401CE3
        x.main.ctl.x: TC170514B.c:196: resume_from_breakpoint: Assertion `regs.rip == (long) bp->addr + 1' failed.
        Aborted (core dumped)


### History

- 2023-10-01 Copy from Eli Bendersky's code

### Refer

- [](%"2011-01-23 How debuggers work - Eli Bendersky's website.html")

